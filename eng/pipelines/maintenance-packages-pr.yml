trigger:
  batch: true
  branches:
    include:
    - main
    - release/*
    - internal/main
    - internal/release/*

pr:
  branches:
    include:
    - main
    - release/*

variables:
- template: /eng/pipelines/common-variables.yml
- template: /eng/common/templates/variables/pool-providers.yml

- ${{ if eq(variables['_RunAsPublic'], 'true') }}:
  - name: _AdditionalBuildArgs
    value: ''
  - name: _BuildJobDisplayName
    value: 'Build and Test'
- ${{ else }}:
  - name: _AdditionalBuildArgs
    value: '/p:Test=false'
  - name: _BuildJobDisplayName
    value: 'Build, Sign and Publish'

resources:
  containers:
  - container: LinuxContainer
    image: mcr.microsoft.com/dotnet-buildtools/prereqs:cbl-mariner-2.0-fpm

stages:
- stage: build
  displayName: CI
  jobs:
  - template: /eng/common/templates/jobs/jobs.yml
    parameters:
      artifacts:
        publish:
          artifacts: true
          logs: true
          manifests: true
      enableMicrobuild: true
      enablePublishUsingPipelines: true
      publishAssetsImmediately: true
      enablePublishTestResults: true
      testResultsFormat: vstest
      enableSourceIndex: ${{ and(eq(variables._RunAsInternal, True), eq(variables['Build.SourceBranch'], 'refs/heads/main')) }}
      workspace:
        clean: all
      jobs:
      - job: build_windows
        displayName: 'Build Windows'
        timeoutInMinutes: 60
        pool:
          ${{ if eq(variables._RunAsPublic, True) }}:
            vmImage: windows-latest
          ${{ if eq(variables._RunAsInternal, True) }}:
            name: $(DncEngInternalBuildPool)
            demands: ImageOverride -equals 1es-windows-2022
        strategy:
          matrix:
            release:
              _BuildConfig: Release
        preSteps:
        - checkout: self
          fetchDepth: 0
          clean: true
        steps:
        - script: eng\common\cibuild.cmd
            -configuration $(_BuildConfig)
            -prepareMachine
            $(_AdditionalBuildArgs)
            $(_InternalBuildArgs)
          displayName: $(_BuildJobDisplayName)

      - ${{ if eq(variables._RunAsPublic, True) }}:
        - job: build_linux
          displayName: 'Build Linux'
          timeoutInMinutes: 60
          container: LinuxContainer
          pool:
            vmImage: ubuntu-latest
          strategy:
            matrix:
              debug:
                _BuildConfig: Debug
          preSteps:
          - checkout: self
            clean: true
          steps:
          - script: eng/common/cibuild.sh
              --configuration $(_BuildConfig)
              --prepareMachine
              $(_AdditionalBuildArgs)
              $(_InternalBuildArgs)
            displayName: $(_BuildJobDisplayName)

      - job: pack_linux
        parameters:
          artifacts:
            publish:
              # Disable artifacts publish just for this job
              # But override the copying and publish tasks below
              artifacts: false
        enablePublishBuildArtifacts: true
        displayName: 'Pack Linux'
        timeoutInMinutes: 60
        container: LinuxContainer
        pool:
          vmImage: ubuntu-latest
        strategy:
          matrix:
            release:
              _BuildConfig: Release
        preSteps:
        - checkout: self
          clean: true
        steps:
        - script: eng/common/cibuild.sh
            --configuration $(_BuildConfig)
            --prepareMachine
            /p:Test=false
            /p:IsPackable=true
            /p:UnsetIsPackableForNonSourceProjects=true
            $(_AdditionalBuildArgs)
            $(_InternalBuildArgs)
          displayName: 'Build and pack'
        # When artifacts.publish.artifacts is true, the bin folder is also published but
        # we don't want that, so instead we manually copy and publish the artifacts here
        - task: CopyFiles@2
          displayName: Gather packages for artifact publishing
          inputs:
            SourceFolder: 'artifacts/packages'
            Contents: '**'
            TargetFolder: '$(Build.ArtifactStagingDirectory)/artifacts/packages'
        - task: PublishBuildArtifacts@1
          displayName: Publish the packages to artifacts
          inputs:
            PathtoPublish: '$(Build.ArtifactStagingDirectory)/artifacts'
            PublishLocation: Container
            ArtifactName: ${{ coalesce(parameters.artifacts.publish.artifacts.name , 'Artifacts_$(Agent.Os)_$(_BuildConfig)') }}
          continueOnError: true
          condition: always()

- ${{ if eq(variables._RunAsInternal, True) }}:
  - template: /eng/common/templates/post-build/post-build.yml
    parameters:
      publishAssetsImmediately: true
